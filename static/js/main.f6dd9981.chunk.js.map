{"version":3,"sources":["assets/images/profile.JPG","components/Profile/Profile.js","components/Toolbar/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","className","src","profile","alt","icon","faEnvelope","size","color","faSkype","faPhoneSquareAlt","faMapMarkerAlt","faFacebook","onClick","window","open","faGithub","faLinkedin","Toolbar","App","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,qC,wSCwF5BC,G,MAxEC,WAad,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,kBACb,yBAAKC,IAAKC,IAASC,IAAI,sBAEzB,yBAAKH,UAAU,sBACb,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,0BAAd,oBACA,wBAAIA,UAAU,yBAAd,gBAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAiBI,KAAMC,IAAYC,KAAK,KAAKC,MAAM,YACnD,+DAEF,yBAAKP,UAAU,kBACb,kBAAC,IAAD,CAAiBI,KAAMI,IAASF,KAAK,KAAKC,MAAM,YAChD,mDAEF,yBAAKP,UAAU,kBACb,kBAAC,IAAD,CACEI,KAAMK,IACNH,KAAK,KACLC,MAAM,YAER,oDAEF,yBAAKP,UAAU,kBACb,kBAAC,IAAD,CAAiBI,KAAMM,IAAgBJ,KAAK,KAAKC,MAAM,YACvD,sDAIJ,yBAAKP,UAAU,yBACb,yBAAKA,UAAU,sBACb,kBAAC,IAAD,CACEI,KAAMO,IACNL,KAAK,KACLC,MAAM,UACNK,QAnDS,WACnBC,OAAOC,KAAK,mDAqDN,yBAAKd,UAAU,sBACb,kBAAC,IAAD,CAAiBI,KAAMW,IAAUT,KAAK,KAAKM,QAnDlC,WACjBC,OAAOC,KAAK,mCAoDN,yBAAKd,UAAU,sBACb,kBAAC,IAAD,CACEI,KAAMY,IACNV,KAAK,KACLC,MAAM,UACNK,QAtDS,WACnBC,OAAOC,KAAK,iDCnBDG,G,MAJC,WACd,OAAO,4BAAQjB,UAAU,cCkBZkB,E,iLAfX,OACE,6BACE,gCACE,kBAAC,EAAD,OAEF,yBAAKlB,UAAU,aACb,8BACE,kBAAC,EAAD,a,GATMmB,aCOEC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6dd9981.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.d283cad9.JPG\";","import {\r\n  faFacebook,\r\n  faGithub,\r\n  faLinkedin,\r\n  faSkype\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faEnvelope } from \"@fortawesome/free-regular-svg-icons\";\r\nimport {\r\n  faMapMarkerAlt,\r\n  faPhoneSquareAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport profile from \"../../assets/images/profile.JPG\";\r\nimport \"./Profile.scss\";\r\n\r\nconst Profile = () => {\r\n  const openFacebook = () => {\r\n    window.open(\"https://www.facebook.com/cristiano.souza.16\");\r\n  };\r\n\r\n  const openGitHub = () => {\r\n    window.open(\"https://github.com/csvinhal\");\r\n  };\r\n\r\n  const openLinkedIn = () => {\r\n    window.open(\"https://www.linkedin.com/in/csvinhal\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      <div className=\"profile__image\">\r\n        <img src={profile} alt=\"Imagem de perfil\" />\r\n      </div>\r\n      <div className=\"profile__container\">\r\n        <div className=\"container__infos\">\r\n          <h4 className=\"container__infos--name\">Cristiano Vinhal</h4>\r\n          <h6 className=\"container__infos--job\">UI Engineer</h6>\r\n        </div>\r\n        <div className=\"profile__contact\">\r\n          <div className=\"contact__mail\">\r\n            <FontAwesomeIcon icon={faEnvelope} size=\"lg\" color=\"#D93025\" />\r\n            <span>cristiano.vinhal10@gmail.com</span>\r\n          </div>\r\n          <div className=\"contact__skype\">\r\n            <FontAwesomeIcon icon={faSkype} size=\"lg\" color=\"#00AFF0\" />\r\n            <span>cristiano.vinhal</span>\r\n          </div>\r\n          <div className=\"contact__phone\">\r\n            <FontAwesomeIcon\r\n              icon={faPhoneSquareAlt}\r\n              size=\"lg\"\r\n              color=\"#536E12\"\r\n            />\r\n            <span>+55 47 99212-8702</span>\r\n          </div>\r\n          <div className=\"contact__place\">\r\n            <FontAwesomeIcon icon={faMapMarkerAlt} size=\"lg\" color=\"#D93025\" />\r\n            <span>Blumenau-SC/Brasil</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"profile__social-media\">\r\n          <div className=\"social-media__icon\">\r\n            <FontAwesomeIcon\r\n              icon={faFacebook}\r\n              size=\"lg\"\r\n              color=\"#3f51b5\"\r\n              onClick={openFacebook}\r\n            />\r\n          </div>\r\n          <div className=\"social-media__icon\">\r\n            <FontAwesomeIcon icon={faGithub} size=\"lg\" onClick={openGitHub} />\r\n          </div>\r\n          <div className=\"social-media__icon\">\r\n            <FontAwesomeIcon\r\n              icon={faLinkedin}\r\n              size=\"lg\"\r\n              color=\"#0073b1\"\r\n              onClick={openLinkedIn}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport \"./Toolbar.scss\";\r\n\r\nconst Toolbar = () => {\r\n  return <header className=\"toolbar\"></header>;\r\n};\r\n\r\nexport default Toolbar;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport Toolbar from \"./components/Toolbar/Toolbar\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <Toolbar />\r\n        </header>\r\n        <div className=\"container\">\r\n          <main>\r\n            <Profile />\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}